DOM 이란?

문서 객체 모델(The Document Object Model, 이하 DOM)은
HTML, XML 문서의 프로그래밍 interface이다.
DOM은 문서의 구조화된 표현(structured representation)을
제공하며 프로그래밍 언어가 DOM구조에 접근할 수 있는 
방법을 제공하여 그들이 문서 구조, 스타일, 내용 등을 변경
할 수 있게 돕는다. DOM은 구조화된 nodes와 property와 
method를 갖고 있는 objects로 문서를 표현한다. 
이들은 웹 페이지를 스크립트 또는 프로그래밍 언어들에서
사용될 수 있게 연결시켜주는 역할을 담당한다.

웹 페이지는 일종의 문서(document)다. 이 문서는 웹 브라우저를
통해 그 내용이 해석되어 웹 브라우저 화면에 나타나거나 HTML
소스 자체로 나타나기도 한다. 동일한 문서를 사용하여 이처럼 다른 형태로 나타날 수 있다는 점에 주목할 필요가 있다. DOM은 
동일한 문서를 표현하고, 저장하고, 조작하는 방법을 제공한다.
DOM은 웹 페이지의 객체 지향 표현이며, 자바스크립트와 같은
스크립팅 언어를 이용해 DOM을 수정할 수 있다.

웹 페이지를 수정하거나 생성하는데 사용되는 모든 property,
method, event 들은 objects로 구성된다. 예를 들어 
document object는 document 자체를 의미하며, table object는
HTML table에 접근하기 위한 HTMLTableElement DOM 인터페이스를 구현한 것이다. 

DOM과 자바스크립트
DOM은 프로그래밍 언어는 아니지만 DOM이 없다면 자바스크립트 언어는 웹 페이지 또는 XML페이지 및 요소들과 관련된 
모델이나 개념들에 대한 정보를 갖지 못하게 된다. 
문서의 모든 element-전체 문서, 헤드 , 문서 안의 table, table header, table cell 안의 text - 는 문서를 위한 document object model의 한 부붑ㄴ이다. 떄문에, 이러한 요소들을 DOM과 
자바스크립트와 같은 스크립팅 언어를 통해 접근하고 조작할 수 있는 것이다.

초창기에는 자바스크립트와 DOM가 밀접하게 연결되어 있었지만, 나중에는 각각 분리되어 발전해왔다. 페이지 콘텐츠(the page content)는 DOM에 저장되고 자바스크립트를 통해 접근하거나 조작할 수 있다. 이것을 방정식으로 표현하면 아래와 같다.

API(web or XML page) = DOM + JS(scripting language)

API는 응용 프로그램에서 사용할 수 있도록, 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 뜻한다. 주로 파일 제어, 창 제어, 화상 처리, 문자 제어등을 위한 인터페이스를 제공한다.

DOM은 프로그래밍 언어와 독립적으로 디자인되었다. 때문에 
문서의 구조적인 표현은 단일 API를 통해 이용가능하다. 
이 문서에서는 자바스크립트를 주로 사용하였지만, DOM의 구현은 어떠한 언어에서도 가능하다.아래는 파이썬을 사용한 예제이다.

# Python DOM example
import xml.dom.minidom as m 
doc = m.prase("Cl\\Projects\\py\\chap1.xml");
doc.nodeNmae # DOM property of document object;
p_list = doc.getElementsByTagName("para");

DOM 에 어떻게 접근할 수 있는가?
DOM을 사용하기 위해 특별히 해야할 일은 없다. 각각의 브라우저는 자신만의 방법으로 DOM 구현하였으며, 이로인해 실제 DOM기준을 따르는지 확인해야 하는 번거러움이 발생하였다.

<body onload="window.alert("'welcome to my home page!'")

아래의 자바스크립트로는 문서가 로드될 때(모든 DOM을 사용할 수 있게 되는 떄임)실행되는 함수를 정의하였다. 이 함수는 새로운 H1 element를 생성하고, element에 text를 추가하며, H1을 이 무선의 트리에 추가한다.

DOM의 핵심 Interfaces
Docuemnt와 window objects는 DOM프로그래밍에서 가장 자주 
사용하는 objects이다. 
간단하게 설명하자면, window object는 브라우저와 같다고 할 수 있으며, document object는 root document 자체라고 할 수 있다. jeneric Node interface 로부터 상속받은 Element와 Node, Element interfaces가 협력하여 각각의 elements에서 사용할 수 있는 수많은 methods와 properties를 제공한다. 
이러한 elements 는 이전 섹션에서 설명한 table object 예제에서도 살펴봤듯이, elements가 보유한 데이터를 처리할 수 있는 특정한 interfaces 도 가지고 있다. 

아래는 웹 페이지, XML 페이지 스크립팅에서 DOM을 사용하는 공통적인 API들의 간략한 목록이다. 
document.getElementById(id)
docuemnt.getElementsByTagName(name)
document.createElement(name)
parentNode.appendChild(node)
element.innerHTML
elelment.style.left
element.setAttribute
element.getAttribute
element.addEventListener
window.content
window.onload
window.dump
window.scriollTo
