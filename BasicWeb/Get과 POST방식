사용자가 어떠한 홈페이지로 이동하기 위해서는 URL을 브라우저
주소창에 작성하고 엔터를 누르면 원하는 페이지로 이동한다.
사용자는 단순히 URL(Uniform Resource Locator)을 입력하였을
뿐이지만 서버 내부에서는 클라이언트의 요청에 응답하기
위해서 처리를 해주어야 한다. 
여기서 클라이언트가 서버로 요청을 보내는 방법인 

HTTP는 웹상에서 클라이언트와 서버 간에 요청/응답으로 데이터를 주고 받을 수 있는 프로토콜입니다. 클라이언트가 HTTP 프로토콜을 통해 서버에게 요청을 보내면 서버는 요청에 맞는 응답을 클라이언트에게 전송합니다. 이 때, HTTP 요청에 포함되는 HTTP 메소드는 서버가 요청을 수행하기 위해 해야할 행동을 표시하는 용도로 사용합니다. HTTP Method에는 2가지 방식이 있는데, GET방식과 POST방식 이다. 

1. GET 방식의 특징
- URL에 변수(데이터를)포함시켜 요청한다.
- 데이터를 Header(헤더)에 포함하여 전송한다.
- URL에 데이터가 노출되어 보안에 취약하다.
- 전송하는 길이에 제한이 있다.
- 캐싱할 수 있다.

GET방식은 간단한 데이터를 URL에 넣도록 설계된 방식으로 
데이터를 보내는 양에 한계가 있다. 즉 URL의 길이가 정해져 있기 때문에, 많은 양의 정보를 전달할 수 없으며 URL형식에 
맞지 않는 파라미터 이름이나 값은 인코딩되어 전달해야 한다.
(여기서 보내는 길이가 너무 길은 경우 초과데이터는 절단된다)
특별히 전송하는 데이터가 없으므로 GET방식에서 바디는 보통
빈 상태로 전송이 되며, 헤더의 내용 중 Body의 데이터를 설명하는 Content-type 헤더필드로 들어가지 않는다. 
예를 들어 우리가 어떤페이지에서 로그인을 하는 상황이라고 하고, id와 pw를 입력한 후 엔터를 눌렀다고 치면 . 이럴떄 요청을
GET방식으로 전송하는 경우에는 
www.mangkyu.com/login?id=mang&pw=kyu같은 페이지가 있다고 가정을 하면 여기서 GET방식은 ?마크를 통해 URL의 끝을 
알리고, id라는 키(key)에 대해선 mang이라는 값(value)를 
pw라는 키(key)에 대해서는 key라는 값(value)를 전송하는 것을
볼 수 있다. 
여러개의 key와 value를 보내는 경우에 &를 사용하여 이어주는
GET방식은 최소한의 보안유지도 하지 않기 떄문에 실제 웹사이트에서 id와 pw같은 중요한 정보를 get방식으로 사용하면 
개인정보가 노출되는 문제가 발생한다. 
POST방식을 사용하여 데이터를 노출시키는 경우는 개인정보가
포함되지 않는 상황에서 캐싱을 하여 속도를 높이거나 
즐겨찾기를 편리하기 위해 사용되는 경우가 많다. 
우리가 어떤 물건 a에 대해서 즐겨찾기를 추가하면 그물건의 
이름이 a라는 정보를 url에 추가하여 즐겨찾기를 생성할 수 
있는 것이다.

POST방식의 특징
- URL에 변수(데이터)를 노출하지 않고 요청한다.
- 데이터를 Body(바디)에 포함시킨다.
- URL에 데이터가 노출되지 않아서 기본 보안은 되어 있다.
- 전송하는 길이에 제한이 없다
- 캐싱할 수 없다.

GET방식은 URL에 데이터를 붙여서 전송하는 반면에 POST방식은
BODY에 데이터를 넣어저 전송함. 따라서 헤더필드 중 Body의
데이터를 설명하는 Content-type이라는 헤더 필드가 들어가고
어떠한 데이터 타입인지를 명시해주어야 한다. 
데이터를 Body에 포함시키는 이점 떄문에 메시지 길이의 제한은
없지만 최대 요청 받는 시간인 Time out이 존재하므로 클라이언트에서 페이지를 요청하고 기다리는 시간이 존재한다. 
실제 상황에서 POST방식은 URL에 데이터가 노출되지 않으므로
즐겨찾기나 캐싱이 불가능하지만 쿼리스트링(문자열)데이터뿐만
아니라, 라디오 버튼, 텍스트 박스와 같은 객체들의 값도 전송이 가능하다.

GET과 POST의 차이
GET은 Idempotent, POST는 Non-idempotent하게 설계되었습니다. 
Idempotent(멱등)은 수학적 개념으로 다음과 같이 나타낼 수 있습니다.

수학이나 전산학에서 연산의 한 성질을 나타내는 것으로, 연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질

즉, 멱등이라는 것은 동일한 연산을 여러 번 수행하더라도 동일한 결과가 나타나야 합니다. 
여기서 GET이 Idempotent하도록 설계되었다는 것은 GET으로 서버에게 동일한 요청을 여러 번 전송하더라도 동일한 응답이 돌아와야 한다는 것을 의미합니다. 이에 따라 GET은 설계원칙에 따라 서버의 데이터나 상태를 변경시키지 않아야 Idempotent하기 때문에 주로 조회를 할 때에 사용해야합니다. 예를 들어, 브라우저에서 웹페이지를 열어보거나 게시글을 읽는 등 조회를 하는 행위는 GET으로 요청하게 됩니다.

반대로 POST는 Non-idempotent하기 때문에 서버에게 동일한 요청을 여러 번 전송해도 응답은 항상 다를 수 있습니다. 이에 따라 POST는 서버의 상태나 데이터를 변경시킬 때 사용됩니다. 게시글을 쓰면 서버에 게시글이 저장이 되고, 게시글을 삭제하면 해당 데이터가 없어지는 등 POST로 요청을 하게 되면 서버의 무언가는 변경되도록 사용됩니다. 이처럼 POST는 생성, 수정, 삭제에 사용할 수 있지만, 생성에는 POST, 수정은 PUT 또는 PATCH, 삭제는 DELETE가 더 용도에 맞는 메소드라고 할 수 있습니다.

마지막으로 웹페이지를 조회할 때, 링크를 통해 특정 페이지로 바로 이동하려면 해당 링크와 관련된 정보가 필요한데 POST는 요청 데이터가 Body에 담겨 있기 때문에 링크 정보를 가져올 수 없습니다. 반면, GET은 URL에 요청 파라미터를 가지고 있기 때문에 링크를 걸 때, URL에 파라미터를 사용해 더 디테일하게 페이지를 링크할 수 있습니다. 

GET과 POST는 이처럼 큰 차이가 있기 때문에 설계원칙에 따라 적절한 용도로 사용해야합니다.








GET POST 참고 글 : https://hongsii.github.io/2017/08/02/what-is-the-difference-get-and-post/

https://mangkyu.tistory.com/17

출처: https://mangkyu.tistory.com/17
