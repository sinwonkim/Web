WebServer와 WAS

WAS(Web applicaiton Server)
Container란 JSP,Servlet을 실행수 있는
소프트웨어를 말함

Web Server가 필요한 이유?
클라이언트(웹 브라우저)에 이미지파일
(정적 컨텐츠)보내는 과정 생각해보자
- 이미지 파일과 같은 정적인 파일들 웹 문서
  (HTML 문서)가 클라이언트로 보내질 때
  함께 가는 것이 아니다.
- 클라이언트는 HTML문서를 먼저 받고 그에
  맞게 필요한 이미지 파일들을 다시 서버로 
  요청하면 그때서야 이미지 파일을 받아온다.
- Web Server를 통해 정적인 파일들을 Application Server
  까지 가지 않고 앞단에서 빠르게 보내줄 수있다.
 -따라서 Web Server에서는 정적 컨텐츠만 처리하도록 기능을
  분배하여 서버의 부담을 줄일 수 있다.

WAS가 필요한 이유?
- 웹 페이지는 정적 컨텐츠와 동적 컨텐츠 모두
  존재한다.
- 이 때, Web Server만을 이용한다면 사용자가
   원하는 요청에 대한 결과값을 모두 미리 만들어 놓고
   서비스를 해야 한다.
   하지만 이렇게 수행하기에는 자원 절대적으로 부족한다.
   따라서 WAS를 통해 요청에 맞는 데이터를 DB에서 가져와서
   비즈니스 로직에 맞게 그때 그때 결과를 그때 그때 
   결과를 만들어서 준다.

그렇다면 WAS가 WEB Server의 기능도 모두 수행하면 되지 
않을까??

 - WAS는 기본적으로 동적 컨텐츠를 제공하기 위해 존재하는 서버
 - 여러대의 was를 연결가능
   ->Load Balancing을 위해서 Web Server를 사용
   -> 특히 대용량 웹 어플리케이션의 경우(여러 개의 서버 사용)
       Web Server와 WAS를 분리하여 무중단 운영을 위한 장애
       극복에 쉽게 대응할 수 있다.
       ex)앞 단의 Web Server에서 오류가 발생한 WAS를 이용하지 
          못하도록 한 후 WAS를 재시작함으로써 사용자는 오류를 느끼지
          못하고 이용할 수 있다.
  - 여러 웹 어플리케이션 서비스 가능
    ex)하나의 서버에서 PHP Application과 Java Application을
       함께 사용하는 경우
  - 기타
   -> 접근 허용 IP관리, 2대 이상의 서버에서의 세션 관리등도
      Web Server에서 처리하면 효율적 
   즉, 자원 이용의 효율성 및 장애 극복, 배포 및 유지보수의 편의성
   을 위해 Web Server와 WAS를 분리한다.
  -WEB Server를 WAS앞에 두고 WAS들을 Web Server에 플러그인
   형태로 설정하면 더욱 효율적인 분산처리가 가능
   
  







출처:
https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html
