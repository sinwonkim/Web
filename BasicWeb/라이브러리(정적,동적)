라이브러리는 다른 프로그램들과 링크되기 위하여 존재하는, 하나 이상의 서브루튼(subroutine)이나 함수(function)들의 집합 파일을 말하는데
함께 링크(link)될 수 있도록 보통 컴파일된 형태인 목적코드(object code)형태로 존재한다. 
라이브러리는 코드 재사용을 위해 조직화된 오래된 기법 중의 하나이며, 많은 다른 프로그램들에서 사용할 수 있도록, 운영체계나 소프트웨어 개발 환경 제공자들
에 의해 제공되는 경우가 많다.

[정적 라이브러리]
라이브러리에 포함된 목적코드(object code)가 실행 프로그램 컴파일 시에 실행 파일에 복사(포함)되어 배포되는 방식이다.
기본적으로 필요한 기능(routine)이 실행 파일과 동일한 위치에 존재하기 때문에 프로그램 실행파일이 커지는 단점이 있지만,
배포해야 하는 파일이 실행파일 하나 만으로 충분하다는 장점을 가지고 있다.
일반적으로  Unix, Linux, DOS 등 소개된지 오래된 OS등에서는 정적 라이브러리 확장자로 lib, 등을 사용한다.

[동적 라이브러리]
정적 라이브러리의 단점은 실행 프로그램의 크기가 커지는 문제뿐만 아니라, 동일한 라이브러리를 포함한 유사한 프로그램들이 동시에 실행될 경우,
똑같은 코드(code)들이 불필요하게 많은 메모리 자원을 중복해서 사용하는 문제가 발생한다. 게다가, 점차 복잡해지는 소프트웨어의 구조 상 실행 파일 크기가
기하급수적으로 커지는 단점도 있다. 따라서, 어플리케이션들에서 사용되는 공통되는 모듈을 메모리에 단 한쳬라만 적재하고 사용할 수 있는 방법을 강구하게 됨
실행 프로그램에 항상 라이브러리를 포함하하는 것이 아니라 필요할 때만 라이브러리를 메모리로 불러 들이기 떄문에 동적 라이브러리라고 이름 붙임 

동적 라이브러리의 장점 
실행 파일의 크기를 줄여주며, 사용이 끝나면 메모리에서 삭제되기 떄문에 메모리를 보다 효율적으로 사용할 수 있다.

그러나, 프로그램 배포시에 exe파일과 함께 dll파일이 추가로 배포해야 한다는 단점이 있다. dll 파일이 없으면 컴파일 시에는 에러가 나지 않지만
실행 시에는 라이브러리를 찾을 수 없다는 오류가 발생하며, 라이브러리 이름은 정확하지만 만일 버전이 적절하지 않다면, 역시 문제가 발생할 우려가 있다.


