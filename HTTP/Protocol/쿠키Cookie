쿠키 사용은 서버 상태를 요청과 연결하도록 해준다. 
이것은 HTTP가 기본적으로 상태 없는 프로토콜임에도 
세션을 만들어주는 계기가 된다.

HTTP 쿠키(웹 쿠키, 브라우저 쿠키)는 서버가 사용자의 웹 브라우저에 전송하는 작은 데이터 조각.
브라우저는 그 데이터 조각들을 저장할 수 있고 동일한 서버로 다음 요청시 함께 전송할 것이다. 
일반적으로, 두 요청이 동일한 브라우저에서 들어왔는지 아닌지를 판단할 때 사용되곤 한다.
유저 로그인 상태를 유지하는 경우를 예로 들 수 있다. 
쿠키는 상태가 없는(stateless)HTTP 프로토콜에서 상태 기반 정보를 기억한다.

쿠키는 주로 세 가지 목적을 위해 사용된다.
세션관리(Session management)
Logins, shopping carts, game scores, or anything else the server should remember 

개인화(Personalization)
User preferences, thems, and other settings

트래킹(Tracking)
Recording and analyzing user behavior

쿠키는 일반적인 클라이언트 측 스토리지로도 사용된 적이 있지만 쿠키가 클라이언트 측에 데이터를 저장하는 유일한 방법이었을 떄는 적당한 방법이었지만, 요즘에는 modern storage APIs를 선택하는 것을 권한다. 쿠키는 모든 요청과 함께 전송되기 떄문에 
(특히 mobile data connections에서)성능 상의 부담이 될 수 있다. 클라이언트 스토리지를 위한 Modern APIs는 웹스토리지 API(localStorage와 sessionStorage)그리고 IndexedDB 이다.

쿠키 만들기 
HTTP 요청을 수신할 떄, 서버는 응답과 함께 Set-Cookie 헤더를 전송할 수 있다. 쿠키는 보통 브라우저에 의해 저장되며, 그 후 쿠키는 같은 서버에 의해 만들어진 요청(Request)들의 Cookie HTTP헤더안에 포함되어 전송된다. 
만료일 혹은 지속시간(duration)도 명시될 수 있고, 만료된 쿠키는 더이상 보내지지 않는다. 추가적으로, 특정 도메인 혹은 경로 제한을 설정 할 수 있으며 이는 쿠키가 보내지는 것을 제한할 수 있다.

Set-Cookie 그리고 Cookie 헤더 
set-Cookie HTTP 응답 헤더는 서버로부터 사용자 에이전트로 전송된다. 간단한 쿠키는 다음과 같이 설정될 수 있다.

1. Set-Cookie: <cookie-name>=<cookie-value>
이 서버 헤더는 클라이언트에게 쿠키를 저장하라고 전달함 

HTTP/1.0 200 OK 
Content-type : text/html
Set-Cookie : yummy_cookie=choco
Set-Cookie: tasty_cookie=strawberry

이제, 서버로 전송되는 모든 요청과 함께, 브라우저는 Cookie헤더를 사용하여서버로 이전에 저장했던 모든 쿠키들을 회신할 것이다.

GET /sample_pagehtml HTTP/1.1
Host: www.example.org
Cookie: yummy_cookie=choco; tasty_cookie=strawberry

세션쿠키
위에서 생선된 쿠키는 세션 쿠키이다. 클라이언트가 종료되면
삭제(delete)될 것이다, 이유는 xpires 혹은 Max-Age를 명시하지
않았기 떄문이다. 그러나 웹 브라우저는 세션 복구를 할 수 있으며, 이 기능은 브라우저가 결코 닫힌 적이 없던 것처럼 대부분의 세션 쿠키들을 영속적인 것으로 만든다.

영속적인 쿠키 
클라이언트가 닫힐 떄 만료되는 대신에, 영속적인 쿠키는 명시된 날짜(Expires)에 만료되거나 혹은 명시한 기간(Max-Age)이후에 만료된다. 

Set-Cookie: id=a3fwa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;

Secure과 HttpOnly 쿠키 
Secure 쿠키는 HTTPS 프로토콜 상에서 암호화된(encrypted)요청일 경우에만 전송된다. 하지만 Secure일지라도 민감한 정보는 절대 쿠키에 저장되면 안된다, 본질적으로 안정하지 않고 이 플래그가 당신에게 실질적인 보안(real protection)를 제공하지 않기 떄문이다. 
크롬52 혹은 파이어폭스 52로 시작한다면, 안전하지 않은 사이트(http:)는 쿠키에 Secure 설정을 지시할 수 없다.

Cross-site 스크립팅(XSS) 공격을 방지하기 위해 , HttpOnly 쿠키는 JavaScript의 Document.cookie API에 접근할 수 없다;
그들은 서버에게 전송되기만 한다. 예를 들어 서버 쪽에서 
지속되고 있는 세션의 쿠키는 JavaScript를 사용할 필요성이 없기 떄문에 HttpOnly 플래그가 설정될 것이다.
Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly

쿠키의 스코프 
Domain 그리고 Path 디렉티브는 쿠키의 스코프를 정의한다.
어떤 URL을 쿠키가 보내야 하는지 

Domain은 쿠키가 전송되게 될 호스트들을 명시한다. 
만약 명시되지 않는다면, 현재 문서 위치의 호스트 일부를 기본값으로 한다. 도메인이 명시되면, 서브도메인들은 항상 포함된다.

만약 Domain=mozilla.org이 설정되면, 쿠키들은 developer.mozilla.org와 같은 서브도메인상에 포함되게 된다.

Path는 Cookie 헤더를 전송하기 위하여 요청되는 URL 내에서 반드시 존재해야 하는 URL 경로이다. 
%x2F("/")문자는 디렉티브 구분자로 해석되며 서브 디렉토리들과 
잘 매치될 것이다.

만약 Path=/docs이 설정되면, 다음의 경로들은 모두 매치될 것이다

/docs
/docs/Web/
/docs/Web/HTTP

SameSite 쿠키 
SameSite 쿠키는 쿠키가 cross-site 요청과 함께 전송되지 않았음을 요구하게 만들어, cross-site 요청 위조 공격(CSRF)에 대해 어떤 보호 방법을 제공한다. 
SameSite 쿠키는 여전히 실험중이며 모든 브라우저에 의해 제공되지 않고 있다.

Documnet.cookie를 사용한 자바스크립트 접근 
새로운 쿠키들은 Document.cookie를 사용해 만들어질 수도 있으며, HttpOnly 플래그가 설정되지 않은 경우 기본의 쿠키들은 자바스크립트로부터 잘 접근될 수 있다.

세션 하이재킹과 XSS
쿠키는 대게 웹 어플맄에ㅣ션에서 사용자와 그들의 인증된 세션을 식별하기 위해 사용되곤 한다. 
그래서 쿠키를 가로채는 것은 인증된 사용자의 세션 하이재킹으로 이어질 수 있다. 
쿠키를 가로채는 일반적인 방법은 소셜 공학 사용 혹은 애플리케이션 내 XSS 취약점을 이용하는 것을 포함한다.

HttpOnly 쿠키 속성은 자바스크립트를 통해 쿠키 값에 접근하는 것을 막아 이런 공격을 누그러뜨리는데 도움을 줄 수 있다.

Cross-site 요청 위조 (CSRF)
위키피디아의 예와 같은 상황에서, 당신의 은행서버에 돈을 입금하는 실제 요청 대신에, 실제로는 이미지가 아닌 이미지를 포함 시키고 있다. 
