객체?
물리적으로 존재하거나 추상적으로 생각할 수 있는 것중에서 자신의 속성을 가지고 
있고 다른 것과 식별 가능한 것을 말한다.



객체
-속성과 동작으로 구성되어 있다.
ex) 사람 객체
    이름,나이  등의 속성  -> 자바에서는 필드 field
    웃다(),걷다() 등의 동작  -> 자바에서는 메소드 method
    
    현실 세계의 객체 -> 소프트웨어 객체로 설계하는 것을 객체 모델링이라고 한다. 
    객체 모델링은 현실 세계의 속성과 동작을 추려내어 소프트웨어 객체의 필드와 메소드로 정의하는 과정이라고 
    볼 수 있다.
 
객체의 상호작용 

현실 세계에서 일어나는 모든 현상은 객체와 객체의 상호작용으로 이루어져 있다.  
ex) 사람은 전자계산기의 기능을 이용하고, 전자계산기는 계산 결과를 사람에게 알려주는 상호작용을 한다. 
사람이라는 객체가 전자계산기라는 메소드의 기능을 이용하고 전자계산기 메소드는 계산결과를 return 해준다. 

객체들은 각각 독립적으로 존재하고, 다른 객체와 서로 상호작용 하면서 동작한다.
객체들 사이의 상호작용 수단은 메소드이다. 객체가 다른 객체의 기능을 이용하는 것이 바로 메소드 호출이다.

객체에 도트(.)연산자를 붙이고 메소드 이름을 기술하면 된다 도트 연산자는 객체의 필드와 메소드에 접근할 때 사용한다.

returnValue = 전자계산기객체.메소드(매개값1,매개값2);

매개값은 메소드를 실행하기 위해 필요한 데이터이다. 리턴값은 메소드가 실행하고 나서 호출한 곳으로 돌려주는
값이다. 


객체의 상호작용은 객체 간의 메소드 호출을 의미하며 매개값과 리턴값을 통해서 데이터를 주고 받는다. 

-- 객체간의 관계 ---
객체는 개별적으로 사용될 수 있지만, 대부분 다른 객체와 관계를 맺고 있다. 이 관계의 종류에는
집합관계, 사용관계, 상속관계가 있다. 

객체지향 프로그래밍(OOP:Ojbect Oriented Programming)은 만들고자 하는 완성품인 객체를 모델링하고,
집합 관계에 있는 부품 객체와 사용 관계에 있는 객체를 하나씩 설계한 후 조립하는 방식으로 
프로그램을 개발하는 기법이다. 

--- 객체 지향 프로그래밍의 특징 ----
객체 지향 프로그램의 특징으로는 캡슐화, 상속, 다형성을 들수 있다. 

ㅁ캡슐화(Encapsulation)
캡슐화란 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것을 말한다. 
외부 객체는 객체의 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있다. 

필드와 메소드를 캡슐화하여 보호하는 이유는 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하는데 있다.
자바 언어는 캡슐화된 멤버를 노출시킬 것인지, 숨길 것인지 결정하기 위해 접근 제한자를 사용한다.
접근 제한자는 객체의 필드와 메소드의 사용범위를 제한함으로써 외부로부터 보호한다.

ㅁ상속
부모 역할의 상위 객체와 자식 역할의 하위객체 
상위 객체가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어 하위 객체가 사용할 수 있도록 해준다.

상위 객체
필드1
메소드 1

하위객체  extends 상위 객체 
필드 1(상위객체로부터 상속받음)
필드2(하위객체)
메소드 1(상위객체로부터 상속받음)
메소드2(하위객체)

ㅁ다형성 
같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다. 
자바는 다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용한다.
부모 타입에는 모든 자식 객체가 대입될 수 있고, 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다.
ex) 자동차를 설계할 때 타이어 인터페이스 타입을 적용했다면 이 인터페이스를 구현한 실제 타이어들은 어떤 것이든 상관없이 장착(대입)이
    가능하다.


