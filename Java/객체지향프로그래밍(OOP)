*객체 지향 프로그래밍(OOP: Object Oriented Programming)
만들고자 하는 완성품인 객체를 모델링하고, 집합 관계에 있는 부품 객체와 사용 관계에 있는
객체를 하나씩 설계한 후 조립하는 방식으로 프로그램을 개발하는 기법이다.

객체 지향 프로그래밍의 특징 
객체 지향 프로그램의 특징으로는 캡슐화, 상속, 다형성을 들 수 있다. 

*캡슐화(Encapsulation)
캡슐화란 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것을 말함 
외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만을 이용할 수 있다.

필드와 메소드를 캡슐화하여 보호하는 이유는?
외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하는데 있다. 
자바 언어는 캡슐화된 멤버를 노출시킬 것인지, 숨길 것인지를 결정하기 우해 접근 제한자(Access Modifier)를 사용한다.
접근 제한자는 객체의 필드와 메소드의 사용 범위를 제한함으로써 외부로부터 보호한다.

*상속(Inheritance)
객체 지향 프로그래밍에서도 부모 역할의 상위 객체와 자식 역할의 하위 객체가 있다. 
상위 객체는 자기가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어 하위 객체가 사용할 수 있도록 해준다.

상속의 장점 
상속은 상위 객체를 재사용해서 하위 객체를 쉽고 빨리 설계할 수 있도록 도와주고, 이미 잘 개발된 객체를 재사용해서 
새로운 객체를 만들기 떄문에 반복된 코드의 중복을 줄여준다.
ex)필드1, 필드2, 메소드1, 메소드2를 가지는 객체를 설계한다고 생각해보자. 4개를 모두 처음부터 설계하는 것보다는 
이미 필드1과 메소드1이 있는 객체가 있다면, 이것을 상속하고, 필드2와 메소드2만 설계하는 것이 보다 효율적이고 개발 시간을
절약시켜준다. 

상속은 상위 개체의 수정으로 모든 하위 객체들의 수정 효과를 가져오므로 유지 보수 시간을 최소화시켜주기도 한다.
ex) 객체 B, C가 객체 A를 상속할 경우 A의 필드와 메소드를 수정함으로써 객체B, C를 수정하지 않아도 객체A의 수정된 필드와 메소드를
    사용할 수 있다.
    
*다형성(Polymorphism)
다형성은 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다. 
코드 측면에서 보면 다형성은 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 해준다.
자바는 다형성을 위해 부모 클래스 또는 인터페이스 타입 변환을 허용한다. 부모 타입에는 모든 자식 객체가 대입될 수 있고,
인터페이스 타입에는 모든 구현 객체가 대입될 수 있다. 다형성의 효과로 객체는 부품화가 가능하다. 
ex) 자동차를 설계할 때 타이어 인터페이스 타입을 적용했다면 이 인터페이스를 구현한 실제 타이어들은 어떤 것이든 상관없이 장착(대입)이 가능하다.

*객체와 클래스 
현실에서 객체는 갑자기 하늘에서 떨어지는 것이 아니라, 설계도를 바탕으로 만들어진다.
ex)우리가 자동차를 이용하기 위해서는 우선 공장에서 설계도를 보고 자동차를 만들어야 한다. 객체지향 프로그래밍에서도 마찬가지다.
메모리에서 사용하고 싶은 객체가 있다면 우선 설계도로 해당객체를 만드는 작업이 필요하다. 자바에서는 설계도가 바로 클래스(Class)이다. 
클래스에서는 객체를 생성하기 위한 필드와 메소드가 정의되어 있다. 
클래스로부터 만들어진 객체를 해당 클래스의 인스턴스(instance)라고 부른다. 자동차 객체는 자동차 클래스의 인스턴스인 셈이다. 
그리고 클래스로부터 객체를 만드는 과정을 인스턴스화라고 한다. 
하나의 클래스로부터 여러 개의 인스턴스를 만들 수 있는데, 이것은 동일한 설계도로부터 여러 대의 자동차를 만드는 것과 동일

객체 지향 프로그래밍 개발의 세 가지 단계 
1.클래스 설계 -> 2. 설계된 클래스 가지고 사용할 객체 생성 -> 3.생성된 객체를 이용하는 것 














































출처 
이것이 자바다 
