인터페이스는 객체의 사용 방법을 정의한 타입이다.
인터페이스는 객체의 교환성을 높여주기 때문에 
다형성을 구현하는 매우 중요한 역할을 한다.

인터페이스(interface)는 개발 코드와 객체가 서로 
통신하는 접점 역할을 한다. 개발 코드가 인터페이스
메소드를 호출하면 인터페이스는 객체의 메소드를
호출 시킨다. 
그렇기 떄문에 개발 코드는 객체의 내부 구조를 
알 필요가 없고 인터페이스의 메소드만 알고 있으면
된다. 

왜 이런식으로 사용하지? 개발 코드가 직접 객체의 
메소드를 호출하면 간단한데, 왜 중간에 인터페이스를
두는지 위문점이 생긴다. 그 이유는 개발 코드를 
수정하지 않고, 사용하는 객체를 변경할 수 있도록
하기 위해서이다. 
인터페이스는 하나의 객체가 아니라 여러 객체들과 사용이 가능하므로 어떤 객체를 사용하느냐에 따라서 실행 내용과 리턴값이 다를 수 있다. 
따라서 개발 측면에서는 코드 변경 없이 실행 내용과
리턴값을 다양화할 수 있다는 장점을 가지게 된다.

인터페이스 선언 
인터페이스 선언은 class 키워드 대신에 interface키워드
사용한다.

public interface 인터페이스명 {}

public 접근 제한은 다른 패키지에서도 인터페이스를
사용할 수 있도록 해준다. 

클래스는 필드, 생성자, 메소드를 구성 멤버로 가지는데
비해, 인터페이스는 상수와 메소드만을 구성 멤버로 
가진다. 
인터페이스는 객체로 생성할 수 없기 떄문에 
생성자를 가질 수 없다. 
자바 7이전까지는 인터페이스의 메소드는 실행 블록이
없는 추상 메소드로만 선언이 가능했지만, 자바 8부터는 디폴트 메소드와 정적 메소드로 선언이 가능하다.

인터페이스는 데이터를 저장할 수 없기 때문에 
데이터를 저장할 인스턴스 또는 정적 필드를 선언할 수 
없다. 대신 상수 필드만 선언할 수 있다. 

상수명은 대문자로 작성하되, 서로 다른 단어로 구성되어 있을경우에는 언더바(_)로 연결하는 것이 관례이다.

인터페이스 상수는 static{} 블록으로 초기화할 수 없기
때문에 반드시 선언과 동시에 초기값을 지정해야 한다.


★추상 메소드 선언 
인터페이스를 통해 호출된 메소드는 최종적으로 객체에서 실행된다. 그렇기 때문에 인터페이스 메소드는
실행 블록이 필요 없는 추상 메소드로 선언한다.

추상 메소드는 리턴 타입, 메소드명, 매개변수만 기술되고 중괄호 {} 를 붙이지 않는 메소드를 말한다.
인터페이스에 선언된 추상 메소드는 모두  public abstract의 특성을 갖기 때문에 public abstract를 
생략하더라도 자동적으로 컴파일 과정에서 붙게 된다.

ex)
public interface 인터페이스명{
  리턴타입 메소드명(매개변수);
}

인터페이스 구현 
개발 코드가 인터페이스 메소드를 호출하면 인터페이스는 객체의 메소드를 호출한다. 객체는 인터페이스에서
정의된 추상메소드와 동일한 메소드 이름, 매개 타입,
리턴 타입을 가진 실체 메소드를 가지고 있어야 한다.
이러한 객체를 인터페이스의 구현(implement)객체라고
하고, 구현 객체를 생성하는 클래스를 구현 클래스라고 
한다. 

구현 클래스
구현 클래스는 보통의 클래스와 동일한데, 인터페이스 타입으로 사용할 수 있음을 알려주기 위해 클래스 선언부에 implements 키워드를 추가하고 인터페이스명을
명시해야 한다.

public class 구현클래스명 implements 인터페이스명 {
   //인터페이스에 선언된 추상 메소드의 실체 메소드      선언
}
그리고 인터페이스에 선언된 추상메소드의 실체 메소드를 선언해야 한다. 























출처:
이것이 자바다.
