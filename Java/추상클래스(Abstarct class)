추상클래스
 new 키워드로 인스턴스(객체) 생성x

추상클래스 용도 
실체 클래스들의 공통적인 특성(필드,메소드)
뽑아내어 추상 클래스로 만듬

추상클래스 사용용도
첫 번째, 실체 클래스들의 공통된 필드와 메소드 이름을
통일할 목적 

실체 클래스를 설계하는 사람이 여러 사람일 경우, 실체
클래스마다 필드와 메소드가 제각기 다른 이름을
가질 수 있다. 
ex) 소유자의 이름을 저장하는 필드를 Thlephone에서는 owner라 하고 SmartPhone에서는 user라고 할 수 
있다. 그리고 전원을 켜다라는 메소드를 Telephone에서는 turnOn()으로 설계하고, SmartPhone에서는 powerOn()이라고 설계할 수 있다. 
동일한 데이터와 기능임에도 불구하고 이름이 다르다 보니, 객체마다 사용 방법이 달라진다. 
이것 보다는 Phone이라는 추상 클래스에 소유자인 owner 필드와 turnOn() 메소드를 선언하고, 
Telephone과 SmartPhone을 상속함으로써 필드와 
메소드를 통일시킬 수 있다. 

두 번째, 실체 클래스를 작성할 때 시간을 절약
공통적인 필드와 메소드는 추상 클래스인 Phone에
모두 선언해 두고, 실체 클래스마다 다른 점만 실체 
클래스에 선언하게 되면 실체 클래스를 작성하는데
시간을 절약할 수 있다. 

추상클래스 선언 

public abstract class 클래스명 {
   //필드
  //생성자
  //메소드
}

abstract를 붙이게 되면 new 연산자를 이용해서 
객체를 만들지 못하고 상속을 통해 자식 클래스만
만들 수 있다. 

추상 클래스도 일반 클래스와 마찬가지로 필드, 생성자,
메소드 선언을 할 수 있다. new 연산자로 직접 생성자를 호출할 수는 없지만 자식 객체가 생성될 때 
super()를 호출해서 추상 클래스 객체를 생성하므로
추상 클래스도 생성자가 반드시 있어야 한다. 





출처:
이것이자바다
