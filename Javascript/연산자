false는 0으로 취급 될 수 있고
true는 1로 취급 될 수 있다.
객체나 배열의 인스턴스가 존재한다면 이 또한 true로 취급된다.

== 동등 비교 연산자 
이 연산자는 두 값이 같은 값인지를 비교한다.

=== 일치 비교 연산자 
두 값이 서로 같은 데이터 타입의 같은 값을 가지는지를 비교한다.

ex)
'2' === 2 같은 데이터 타입이거나 같은 값이 아니기 때문에 false 를 리턴한다

'2' === '2' 같은 데이터 타입이면서 같은 값을 가지고 있기 때문에 true를 리턴한다.

비교연산자는 주로 true나 false 중 하나의 값을 리턴한다.
논리 연산자는 둘 이상의 비교 연산자의 결과를 비교하기 위해 사용한다.
ex)
((3 < 2)&& (2 >= 4))
3 보다 2가 큰가 ? false 
2가 4보다 크거나 같은가? flase 
논리적 AND 연산자는 양쪽의 표현식이 모두 true인지 여부를 검사한다. 이 경우에는 양쪽 모두 
false이므로 전체 결과는 false가 된다.

논리적 AND  이 연산자는 하나 이상의 조건을 검사한다.
true && true    true 를 리턴 
true && false  flase를 리턴
false && true false를 리턴
false && false 는 false를 리턴 

논리적 OR ||  이 연산자는 최소한 한 개의 조건을 검사한다.

true || true 는 true를 리턴
true || false 는  true 를 리턴
false || true 는 true를 리턴
false || false 는 false를 리턴

논리 표현식은 왼쪽부터 오른쪽 순서로 평가된다. 만일 첫 번째 조건이 전체 조건에 대한
충분한 정보를 제공하면 두 번째 조건을 평가할 필요가 없다.

false && 표현식 
이미 flase 를 발견함 이 경우 && AND연산자를 모두 true 일때 true 인지라 어차피 false라 더이상
계속 판단할 이유가 없다.

true || true 인 경우도 true 를 이미  || OR 연산자에서 발견해서 하나의 값이 true 이면  true를 리턴해서 
더 이상 평가를 수행할 필요 x 

if문 
if구문은 조건식을 평가(혹은 검사)하는 구문 
만일 조건식이 true라고 판단되면 그 이후의 코드 블록 내의 코드들이 실행된다.
if(true면) {
//코드 블록 내의 코드들이 실행된다.
};

if(true일때) {
 // 블록내 실행 코드는 끝이 ;  끝나야 하지만 코드 블록의 끝을 의미하는 중괄호에는 ; 붙일 필요x
} else {

}


switch(조건) {

}


ex) 
let msg; // 메시지
let level = 3; //

switch(level) {
    case 1:
    msg = "지금 단계는 1단계 입니다.";
    break;

    case 2:
    msg = "지금 단계는 2단계 입니다.";
    break;

    case 3:
    msg = "지금 단계는 3단계 입니다.";
    break;

    default :
    msg = "모든 단계에 해당되지 않습니다.";
    break;
}

let el = document.getElementById("checkPassContenteck");
el.innerHTML = msg;


결과
지금 단계는 3단계 입니다.


