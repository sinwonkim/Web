Web server는 하드웨어, 소프트웨어 혹은 두 개 모두를 의미할 수 있다. 

1. 하드웨어 측면에서 web server는 website의 컴포넌트 파일들을  저장하는 컴퓨터이다. 
컴포넌트 파일에는 HTML 문서 , images, CSS stylesheets, 그리고 JavaScript files 있다. 
이 파일들을 최종 소비자와 디바이스에 전달한다. 
web server는 인터넷에 연결되어 있고, mozilla.org와 같은 
domain name을 통해 접속될 수 있다. 

2. Soft ware측면에서, web server는 기본적으로 웹 사용자가 
어떻게 호스트 파일들에 접근하는지를 관리한다.
web server는 HTTP서버로 국한함 
HTTP서버는 URL(web address) 과 HTTP(당신의 브라우저가 웹 페이지를 보여주기 위해 사용하는 프로토콜)의 소프트웨어 일부이다.

가장 기본적인 단계에서, 브라우저가 웹 서버에서 불려진 파일을 필요로 할 떄, 브라우저는 HTTP를 통해 파일을 요청함 요청이 올바른 웹 서버(하드웨어) 에 도달 하였을 떄, HTTP 서버(software)는 요청된 문서를 HTTP를 이용해 보내준다.

웹 사이트를 공개하기 위해서는, 당신은 정적 혹은 동적 웹 서버가 필요하다.

정적 웹 서버 혹은 스택은 HTTP서버 (소프트웨어)가 있는 컴퓨터(하드웨어)로 구성되어 있다. 
서버가 그 불려진 파일을 당신의 브라우저에게 전송하기 떄문에, 저희는 그것을 "정적"이라고 부른다.

동적 웹 서버는 정적 웹 서버와 추가적인 소프트웨어(대부분 일반적인 애플리케이션 서버와 데이터베이스)로 구성되어 있다. 
애플리케이션 서버가 HTTP 서버를 통해 당신의 브라우저에게 불려진 파일들을 전송하기 전에, 애플리케이션 서버가 업데이트하기 떄문에 우리는 이것을 동적이라고 부른다.

예를 들어, 당신이 브라우저에서 보는 최종 웹 페이지들을 생성하기 위해, 애플리케이션 서버는 아마 데이터베이스로 온 컨텐츠들로 이루어진 HTML 템플릿을 채울지 모른다. 
MDN 혹은 Wikipedia와 같은 사이트들은 수 천개의 웹페이지들을 가지고 있지만, 그것들은 실제의 HTML문서가 아니라 오직 약간의 HTML 템플릿과 엄청 큰 데이터베이스로 되어 있다. 
이 구성은 내용들을 전달하고 관리하기 쉽고 빠르게 만들어 준다.


호스팅 파일들 
웹 서버는 처음에 HTML 문서라고 불리는 웹 사이트의 파일들과 이미지, CSS 스타일시트, JavaScript 파일, 폰트, 비디오를 포함한 관련된 것들을 저장해야 한다.

기술적으로, 당신은 컴퓨터에 있는 그 파일들을 불러올 수 있지만, 그것들을 전담하는 웹 서버에 저장하는것이 훨씬 더 편리하다.
전담하는 웹 서버는:

-항상 실행 중 
-항상 인터넷과 연결되어 있음
-항상 같은 IP주소를 가지고 있다.(모든 ISPs가 홈 라인에 대해 고정된 IP주소를 제공하는 것은 아니다.)
- 제 3자에 의해 유지보수 됨 

이러한 이유들로, 좋은 호스팅 제공자를 찾는 것은 당신의 웹 사이트를 구축하는 것의 핵심 부분이다.
당신이 웹 호스팅 솔루션을 설정했다면, 그저 당신의 웹 서버에 파일들을 업로드 하면 된다.

HTTP를 이용해 통신하기 
두 번쨰로, 웹 서버는 HTTP(heper transfer protocol)을 지원한다
이름이 의미하듯이, HTTP는 어떻게 두 컴퓨터간의 
hypertext(예를 들어, 연결된 웹 문서)를 전송하는지를 서술함 

프로토콜은 두 컴퓨터간의 통신을 위한 규칙의 집합 
HTTP는 문자로 된 , 독립적인 프로토콜 

Textual(문자로 된)
모든 명령어들은 기본 문자이며 사람들이 읽을 수 있다.

Stateless(독립적인)
서버 혹은 클라이언트는 이전의 통신을 기억하지 않는다. 
예를 들어, HTTP에만 의존하면, 서버는 당신이 입력한 비밀번호 혹 당신이 처리한 단계를 기억하지 못한다. 당신은 그러한 일들을 위한 애플리케이션 서버가 필요하다.

HTTP는 어떻게 클라이언트와 서버가 통신을 하는지 명확한 규칙을 제공한다. 

-오직 클라이언트만이 HTTP 요청을 만들 수 있으며, 서버에게만 보낼 수 있다. 서버는 오직 클라이언트의 HTTP 요청에 응답할 수 있다.

- HTTP를 통해 파일을 요청할때, 클라이언트는 반드시 URL 파일들을 제공해야 한다. 
-웹 서버는 반드시 최소한의 에러메시지를 포함하여 모든 HTTP 요청에 응답해야 한다.

웹 서버에서, HTTP 서버는 들어오는 요청들에 의해 응답하고, 처리해야 한다.

1.요청을 받으면, HTTP 서버는 먼저 요청받은 URL이 존재하는 파일과 매칭이 되는지를 확인하다.

2.만약 매칭된다면, 웹 서버는 그 파일 내용을 브라우저에게 되돌려 준다. 만약 그렇지 않다면 애플리케이션 서버는 필요한 파일을 구축한다.

3.만약 위 둘의 과정이, 웹 서버는 브라우저에게 에러 메시지를 반환한다. 대부분의 에러 메시지는 "404 Not Found"이다.


정적 vs 동적 컨텐츠 

대략적으로 말하자면, 서버는 정적 혹은 동적 컨텐츠 모두 제공할 수 있다. "정적"은  있는 그대로 제공되는 것 served as-is를 의미 

"동적"은 서버가 컨텐츠를 처리하는 것, 심지어는 컨텐츠를 데이터베이스로부터 생성하는 것을 의미한다.
이 방법은 더 많은 유연성을 제공하지만, 기술적 스택이 더 다루기 힘들어지고, 웹 사이트를 구축하는 것이 훨씬 더 복잡해진다.

당신이 읽고 있는 페이지를 예시로 든다면. 이 사이트를 호스팅하고 있는 웹 서버에는, 데이터베이스로부터 내용들을 받고, 구성하고, HTML 템플릿 안에 집어넣고, 당신에게 결과를 보내주는 애플리케이션 서버가 있다. 
이러한 경우, 애플리케이션 서버는 Kuma라고 불리고, Python(Django 프레임워크를 이용한)으로 구축된다. 
Mozilla 팀은 MDN의 특수한 목적으로 Kuma를 만들었지만, 많은 다른 기술들로 만들어진 비슷한 애플리케이션이 존재한다.














출처 
https://developer.mozilla.org/ko/docs/Web/API
