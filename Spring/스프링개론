 목차
-컨테이너
-스프링
-스프링 컨테이너
-의존성주입(DI) 제어역전(IoC)



*컨테이너는 필요할때마다 다른 객체를 컨테이너에서
받아내는 방식을 통해 객체들간의 의존성 해결이
목적이었음
스프링 창시자인 로드 존슨 EJB를 사용하지 않고도
객체간 의존성 해결이 가능한 컨테이너를 개발함,
이것이 스프링의 시작

특정 기술에 종속되지 않고(기술 비침투적)
객체를 관리할 수 있는 컨테이너를 제공하는 것이
스프링의 기본 철학

*스프링은 WAS의 기능적인 부분을 유지하되 
기술 침투적인 부분을 모두 해결해주며, 따라서
개발자는 비즈니스 로직에 집중할 수 있도록 해줌

*스프링 컨테이너
스프링 컨테이너는 특정 클래스를 상속하거나
인터페이스를 구현하지 않는 평범한 자바 클래스
(POJO, Plain Old Java Object)를 이용하여 EJB의 기능을
유지하면서 복잡성을 제거하고, 객체들의 라이프 사이클을
관리해줌 

각 라이브러리들의 객체들은 스프링 컨테이너에서
관리하기 때문에 사용법이 일관적이라는 특징이
있다.
Spring Container는 여러 객체들이 모여있는 
공장(Bean Factory)과 같은 개념이다.
Spring Container를 Bean Factory 또는 IoC Container
라고도 한다.

의존성 주입(DI)과 제어 역전(IoC)
컨테이너의 주 목적은 의존성 해결이라고 했음
의존성은 무엇일까?

ex)
public Class A {
 public static void main(String[] args) {
	B b = new B();
	b.hello();
 }
}

Class B {
   public void hello(){
   System.out.println("Hello");
 }
}
위의 코드를 보면
클래스 A에서 B 객체를 사용하고 있다.
클래스 A에서는 객체 B가 있어야 B의 메서드를
사용할 수 있고, A는 B에 의존적이라 할 수 있다.

스프링 컨테이너에서는 의존성 주입(DI, Dependency 
Injection)을 통해 의존성을 해결한다.
의존성 주입이란 사용자가 직접 new 키워드를 사용하여
객체를 생성하지 않고, 외부(컨테이너)에서 생성된
객체를 주입 받는 방식을 말한다.

설정 파일에서 아래와 같이 bean을 등록하면 의존성이
해결 된다.
ex)
<bean id='a' class="A" ref='b'>
<bean id='b' class="B">
또는 어노테이션 @Autowired를 통해 의존성 주입을
해결 한다.

스프링에서는 이와 같이 의존성 주입을 통해
객체 간의 의존성 문제를 해결하며, 객체의 생성과
소멸을 개발자가 관리하지 않고 스프링에서 관리하는데,
이러한 현상을 제어 역전 (IoC, Inversion of Control)
이라 한다.

스프링은 기술 비침투(특정 기술에 종속x)가 핵심이다.
이 밖에 DI, IoC등 이 개념 또한 스프링의 핵심




출처:https://victorydntmd.tistory.com/158
