

1.배열(Array)
배열의 크기는 한번 정하면, 크기를 변경을 할 수 없다.
String[] arr = new String[5];
arr = {"1","2"}  ------------ 배열 크기 정해줬으면 이런식은 안됨
arr[0] = "1";    ------  index 형태로 넣어줘야함 

String[] arr2 = new String[];
arr2 = {"1","2","3","4"}

배열 초기화시 메모리가 할당되어 ArrayList보다 빠름
  
2.ArrayList
ArrayList는 크기가 가변적
저장하는 데이터 수에 따라서 크기가 변경됨
데이터 추가는 add(), 삭제는 remove()를 사용
데이터 추가 삭제시 메모리를 재할당하기 떄문에 속도가 배열보다 느림

ArrayList 클래스의 기본 초기 크기는 10이고 , 10보다 더 커져야 하면 자동으로 증가됨 
Array와 비교하여 ArrayList의 장점 
  
동적으로 크기가 변경됨
  
ArrayList<String> list = new ArrayList<>();
list.add("a");
list.add("b");
System.out.println(list);
  
result
[a,b]
  
list.remove("a");
 
generic이 사용되지 않으면, 다양한 타입의 객체를 저장할 수 있음
  
ArrayList list = new ArrayList();
list.add("ONE");
list.add(2);
list.add(new Float(3.0));

--------------------------------------------------------------------------------------------------------------------------------

리스트는 배열과 비슷한 자바의 자료형으로 배열보다 편리한 기능을 많이 가지고 있음
배열은 크기가 정해져 있다. 배열의 크기를 10개로 정했다면 10개 이상의 값을 담을 수 없음

List 자료형 중 가장 간단한 형태의 자료형인 ArrayList
List 자료형에는  ArrayList,LinkedList 등의 List 인터페이스를 구현한 자료형이 있다. 여기서 List 자료형은 인터페이스 
ex)
ArrayList pick = new ArrayLsit(); 제네릭으로 타입지정x 
pick.add(1);   //int
pick.add("2");  // String

자바는 J2SE 5.0버젼 이후부터 
ArrayList<타입> 명 = new ArrayList<타입>(); 이런식으로 객체를 포함하는 자료형도 어떤 객체를 포함하는지에 대해서 명확히
표현하는 것을 권고 하고 있다. 이클립스에서 위와 같이 코딩하면 명확한 타입을 명시하라는 warining이 표시됨 

System.out.println(pick.get(0));  
ArrayList의 get메소드를 이용하면 특정 인덱스의 값을 추출 할 수 있다.

size메소드는 ArrayList의 갯수를 리턴함

ArrayList list = ArrayList(); 
list.add("a");
list.add("b");
list.add(3);

System.out.println(list.size);   

result 
3

contains 

ArrayList pick = new ArrayList();
		pick.add("123");
		pick.add(4);
		
		if(pick.contains("4")) {
			System.out.println("pick 리스트의 갯수는 = " + pick.size()+" 입니다.");
		}else {
			System.out.println("pick의 갯수는 모릅니다.");
		}
		
    result 
    pick의 갯수는 모릅니다.









일부내용은 점프투 자바  // https://wikidocs.net/268  보며 인용해서 정리 하였습니다.
  
