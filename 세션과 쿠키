인터넷은 HTTP 프로토콜을 사용 . 이 HTTP 프로토콜은 상태가 없는 프로토콜이라고 함 
사용자의 브라우저와 서버 간의 상태에 대한 보존 없이 매 순간 순간 새로운 연결을 하고, 요청에 대한 응답을 서버가 전송하고 나면 모든 연결이 
끊어지게 됨 
이렇게 연결이 끊어지게 되면 지금 어떤 사람이 로그인되어 있는지에 대한 내용도 모두 잃어버리게 됨 또한 그 사람이 담아두었던 장바구니의 물품 정보
또한 잃어버리게 됨 

이렇게 상태가 없는 프로토콜을 이용하면서 상태에 대한 보전을 위해서 세션을 사용함 
세션을 뭐라고 이해할 수 있을까? 사용자의 브라우저와 서버간의 논리적인 연결이라고 생각하면 됨 
클라이언트가 서버로 요청을 할 떄 보내지는 정보에는 그 클라이언트에 대한 정보도 포함이 되어서 전송됨 
서버에서는 요청에 실려온 블라우저에 대한 정보를 알 수 있음  이 정보를 세션에 이용하는 것임 

서버가 자신에게 접속한 클라이언트의 정보를 갖고 있는 상태를 '세션'이라고 한다.

FTP 서비스와 HTTP서버 차이점 
FTP는 파일 전송을 위한 프로토콜을 사용하고 있다. FTP는 처음에 FTP서버에 접속을 하면 접속을 한 사용자의 연결을 계속 가지고 있는다.

반면 HTTP서버(웹 서버)는 한 사용자의 연결을 계속 가지고 있지 않는 방식을 취하고 있기 떄문에 사용자의 요청에 대한 응답을 처리한 후 연결을 해제함


쿠키는 세션과는 달리 서버에 클라이언트의 정보를 담아두지 않고 클라이언트 자신들에게 그 정보를 저장하게 됨 
그래서 이후에 서버로 전송되는 요청에는 쿠기가 담아둔 정보를 포함해서

브라우저를 통해서 특정사이트에 접속하면 클라이언트 측에 쿠키가 저장됨 
세션은 서버측에 정보를 남겨두는 것이고 쿠키는 클라이언트 측에 정보를 남기게 됨 

세션의 의미 
세션은 클라이언트와 서버 간에 상태에 대한 연결이 지속되고 있는 상태를 말함 . 
세션은 자바에 있어서 사용되는 세션 즉. javax.servlet.http 패키지의 HttpSession 인터페이스를 통해서 사용되는 세션 

쿠키와 비교되어 거론되는 세션은 바로 HttpSession을 말하는 것이다. 
일반적인 세션은 서버와 클라이언트 간의 연결상태를 말하는 것이다. 

클라이언트와의 상태 보존이 지속되는 것을 '세션'이라고 한다.

쿠키를 구현할 수 있는 쿠키 클래스 

쿠키생성(꼬리표 만들기)
Cookie cookie = new Cookie('','');
쿠키 셋팅(꼬리표에 정보 기록하기)
cookie.setValue('');
쿠키 전달(꼬리표 붙이기)
response.addCookie(cookie);
쿠키 읽기(꼬리표 읽기)
request.getCookie();
클라이언트의 요청과 함께 전달되어져 온 respnse.addCookie(String cookieName)으로 클라이언트에 저장된 쿠키를 읽음 
이 메소드는 클라이언트에 저장된 쿠키를 모두 읽어옴 반환형은 Cookie[]타입으로 반환 

폼과 쿠키 
폼에 입력된 값을 submit을 시키면 액션 속성으로 지정된 페이지에서 폼에 담겨진 값을 읽어 올 수 있다. 
이때는 request 객체와 getParameter()메소드를 사용해서 폼 요소들의 이름을 인자로 주어서 해당 값을 뽑아 올 수 있다,.
ex)
request.getParameter(paramname)

세션 인터페이스 
javax.servlet.http 패키지의 HttpSession 인터페이스를 통해서 세션을 사용할 수 있다. 
하지만 클라이언트에 저장된 쿠키를 열어볼 수가 있기 떄문에 중요한 정보를 쿠키에 저장할 경우 보안에 문ㅔ가 될 경우가 있다 

쿠키라는게 클라이언트쪽에 저장되어있는걸 서버가 읽어들이는 거니깐 

서버와 관련된 정보를 노출시키지 않기 위해서 쿠키를 사용하는 것보다 HttpSession 인터페이스를 이용한
세션의 상태관리가 더욱 효율적이다.

서버에서는 각각의 클라이언트로부터 발생한 요청에 대해서 특정한 ID를 부여했다. 이 ID를 이후에 클라이언트에서 발생한 요청들과 
비교해서 같은 ID인지를 구별할 수 있다. 
또한 ID라는 식별자에 특정한 값을 넣을수도 있다. 이렇게 ID를 다루는 것이 세션이라고 할 수 있다.
여기서 사용되는 유일한 값인 식별자는 클라이언트에 저장된다. 
클라이언트에 저장되는 것은 식별자만이 저장되고 나머지는 서버에 저장된다.

VOID
메소드는 함수로 생각하면 된다 Y=f(x)라는 함수표현을 떠올려 보면 
f()에 어떤값 x를 넣어서 내부적으로 처리한 결과를 y라는 변수에 집어넣음  f() 가 함수,메소드임 자바에서는 메소드는 반환형을 가지는데 
이 반환형은 메소드 내부에서 처리된 결과에 대한 데이터형(int,char,boolean,그리고 객체형)을 말함 
예를 들면 request.getParameter()에서 getParameter()는 메소드 이다.
이 메소드는 반환형이 String인데 , getParameter()메소드 내부에서 처리된 결과는 String이기 떄문에 
이 메소드의 반환형을 Strng이라고 하는 것이다. 하지만 void라는 반환형을 가진 메소드는 메소드 수행결과로 반환해 주는 것이 없기 떄문에 
다른 어떤것으로 받을수가 없다.

Session객체의 메소드들 
getCreateTime() 1970년 1월 1일 자정을 기준으로 하여 현재 세션이 생성된 시간까지 지난 시간을 계산하여 밀리세컨드로 반환함
getId() 세션에 할당된 유일한 식별자ID를 String타입으로 반환함 

hasMoreElements()메소드를 사용해서 객체가 있는지 없는지를 확인함 있으면 true라고 대답하고 없으면, false라고 대답함 
있다면 nextElement()메소드를 통해서 객체를 꺼내옴 
이 메소드의 대답은 즉 객체를 꺼내어 준다. 하지만 몇 번쨰 위치에 있는 객체를 달라에 대한 명령을 수행할 수 있는 메소드는 없다.
객체가 있는 동안, 처음부터 순서대로 하나씩 꺼내는 방법만을 제공함 

톰캣에서 세션은 기본적으로 30분으로 설정이 되어 있다. 즉 세션유지 기간은 30분임 
기본값으로 설정된 세션을 사용했을 때,브라우저로부터 아무런 요청이 없다면, 그리고 이 아무런 요청이 없는 시간이 30분 이상이 되면,
이 브라우저에 연결된 세션은 해제가 된다.
세션을 통해 로그인 서비스를 구현했을 때, 로그인 후 30분간 아무런 요청이 없게 되면, 톰캣은 이 브라우저와의 세션을 해제해 버리게 됨 
