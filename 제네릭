자바J2SE 5.0 이후에 도입된 개념 

ArrayList<String> arr = new ArrayList<String>();

제네릭스가 도입 되기 전인 J2SE 1.4까지는 

ArrayList arr = ArrayList();  와 같이 사용되었다.

여기서 차이점은 <String> 타입을 명시하냐 안하냐 
위에서 사용한 첫번쨰 코드의 <String 이라는 제네릭스 표현식은 ArrayList안에 담을 수 있는 자료형은 String 타입 뿐이다 라는 것을 의미

※ 여기서는 제네릭스의 타입으로 String 자료형만을 예로 들었지만 <Integer>, <Animal>, <Dog> 등 어떤 자료형도 사용할 수 있다.
즉, 제네릭을 이용하면 좀 더 명확한 타입체크가 가능해짐 
이것은 코드를 작성할 때도 몇가지 이득을 주게 된다.

ArrayList arr = new ArrayList();
arr.add("hello");
arr.add("java");

String hello = (String)arr.get(0);
String java = (String)arr.get(1);

위처럼 제네릭 사용하지 않을 경우에는 ArrayLis안에 추가되는 객체는 Object자료형으로 인식됨 Object자료형은 모든 객체가 상속하고 있는
가장 기본적인 자료형 따라서 ArrayList 객체인 arr에 값을 넣을떄는 문제가 안되지만 값을 가져올 경우에는 항상 Object 자료형에서 String 
자료형으로 다음과 같이 형변환(casting)을 해 주어야 한다.

또 한가지 arr안에는 String 객체 이외의 객체도 넣을 수 있기 떄문에 형 변환 과정에서 잘못된 형변환으로 인한 오류가 발생할 소지가 있음
바로 이러한점이 제네릭의 탄생 이유 

위코드를 제네릭 타입으로 하면

ArrayList<String> arr = new ArrayList<String>();
arr.add("Hello");
arr.add("java");

String Hello = arr.get(0); //형 변환 필요x
String java = arr.get(1);



//점프투 자바 https://wikidocs.net/268  내용 보고 정리.
